import numpy as np
import cv2
from tflite_runtime.interpreter import Interpreter

def process_single_image(image_path, output_path, conf_threshold=0.5):
    """Procesa una sola imagen con bounding boxes"""
    
    # Cargar modelo
    interpreter = Interpreter(model_path='detect.tflite')
    interpreter.allocate_tensors()
    
    # Obtener detalles del modelo
    input_details = interpreter.get_input_details()
    output_details = interpreter.get_output_details()
    input_shape = input_details[0]['shape']
    model_height, model_width = input_shape[1], input_shape[2]
    
    # Cargar imagen original
    image = cv2.imread(image_path)
    original_height, original_width = image.shape[:2]
    
    # Preprocesar
    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    image_resized = cv2.resize(image_rgb, (model_width, model_height))
    input_data = np.expand_dims(image_resized, axis=0).astype(np.uint8)
    
    # Inferencia
    interpreter.set_tensor(input_details[0]['index'], input_data)
    interpreter.invoke()
    
    # Obtener resultados
    boxes = interpreter.get_tensor(output_details[0]['index'])[0]
    classes = interpreter.get_tensor(output_details[1]['index'])[0]
    scores = interpreter.get_tensor(output_details[2]['index'])[0]
    
    # Dibujar bounding boxes
    for i in range(len(scores)):
        if scores[i] > conf_threshold:
            class_id = int(classes[i])
            score = float(scores[i])
            
            # Convertir coordenadas
            ymin, xmin, ymax, xmax = boxes[i]
            xmin = int(xmin * original_width)
            xmax = int(xmax * original_width)
            ymin = int(ymin * original_height)
            ymax = int(ymax * original_height)
            
            # Elegir color según clase
            color = (0, 255, 0) if class_id == 1 else (255, 0, 0)  # Verde para personas, Azul para otros
            
            # Dibujar rectangle
            cv2.rectangle(image, (xmin, ymin), (xmax, ymax), color, 3)
            
            # Dibujar etiqueta
            label = f"Class {class_id}: {score:.1%}"
            cv2.putText(image, label, (xmin, ymin-10),
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, color, 2)
    
    # Guardar imagen
    cv2.imwrite(output_path, image)
    print(f"✅ Imagen guardada: {output_path}")

# Ejemplo de uso
process_single_image('dogpersoncat.jpg', 'detecciones.jpg')
